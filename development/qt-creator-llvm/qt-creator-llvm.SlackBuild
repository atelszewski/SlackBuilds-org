#!/bin/bash

# Slackware build script for LLVM/Clang tools for Qt Creator

# Copyright 2022 Andrzej Telszewski, Koszalin
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=qt-creator-llvm

# **TODO**
#
# Switch to versioning scheme that follows the one used for Qt Creator.
# The point is that, the sources used to build this LLVM/Clang are obtained
# from Qt company and are only targeting Qt Creator.
#

VERSION=${VERSION:-20210420_ada5e67e457e}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -eu

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP

rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.?z
cd $PRGNAM-$VERSION

chown -R root:root .
chmod -R a-st,u+rwX,go-w+rX .

# Exceptionally, copy docs before the build starts.  This can save quite
# some script development time should one of the files be missing.

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION/{clang,clang-tools-extra}
mkdir -p $PKG/install

cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild
cat $CWD/slack-desc > $PKG/install/slack-desc

( cd llvm
  cp -a {CODE_OWNERS,CREDITS,LICENSE,RELEASE_TESTERS}.TXT README.txt \
    $PKG/usr/doc/$PRGNAM-$VERSION
)

( cd clang
  cp -a {CODE_OWNERS,LICENSE}.TXT {NOTES,README}.txt \
    $PKG/usr/doc/$PRGNAM-$VERSION/clang
)

( cd clang-tools-extra
  cp -a {CODE_OWNERS,LICENSE}.TXT README.txt \
    $PKG/usr/doc/$PRGNAM-$VERSION/clang-tools-extra
)

# Build LLVM/Clang.

INSTALL_PREFIX=/usr/libexec/qtcreator/clang
LLVM_PROJECTS="clang;clang-tools-extra"

mkdir -p build
cd build
  cmake                                    \
    -GNinja                                \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS"    \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS"  \
    -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
    -DLLVM_LIBDIR_SUFFIX=                  \
    -DLLVM_ENABLE_PROJECTS=$LLVM_PROJECTS  \
    -DCMAKE_BUILD_TYPE=Release             \
    -DLLVM_BUILD_LLVM_DYLIB=ON             \
    -DLLVM_LINK_LLVM_DYLIB=ON              \
    -DLLVM_ENABLE_RTTI=ON                  \
    -DLLVM_ENABLE_ASSERTIONS=OFF           \
    -DLLVM_BUILD_BENCHMARKS=OFF            \
    -DLLVM_BUILD_TESTS=OFF                 \
    -Wno-dev                               \
    ../llvm

  cmake --build .
  cmake -DCMAKE_INSTALL_PREFIX=$PKG/$INSTALL_PREFIX -P cmake_install.cmake
cd ..

# **TODO**
#
# Optimize the package:
#
# - remove unneeded components. The official binary _clang_ build from
#   Qt Creator installer is a correct example of that,
# - decide between static and shared linking. Static linking increases
#   package size, but should give better start-up speed. Dynamic linking
#   decreases package size at the cost of speed. Take into account the
#   fact that Qt Creator is moving to _clangd_ (LSP), which probably will
#   be a long-running background process and the start-up time will not
#   make much difference, but size saving with dynamic linking will,
# - consider using LTO.
#
# Additional details for packaging LLVM:
#
# - [Building a Distribution of LLVM](https://llvm.org/docs/BuildingADistribution.html)
#

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
