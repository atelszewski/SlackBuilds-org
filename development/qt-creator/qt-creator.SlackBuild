#!/bin/bash

# Slackware build script for Qt Creator

# Copyright 2021 Andrzej Telszewski, Copenhagen
# Copyright 2016 Andre Barboza, Belo Horizonte - Brazil
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# For building -rc or -beta releases, set VERSION to something like:
# VERSION=4.2.0_rc1 or VERSION=4.2.0_beta1 (use underscore in place of a hyphen).

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=qt-creator
VERSION=${VERSION:-6.0.0}
SRCVER=$(echo $VERSION | tr _ -)
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -eu

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP

rm -rf $PRGNAM-$SRCVER
tar xvf $CWD/$PRGNAM-opensource-src-$SRCVER.tar.gz
mv $PRGNAM-opensource-src-$SRCVER $PRGNAM-$SRCVER
cd $PRGNAM-$SRCVER

chown -R root:root .
chmod -R a-st,u+rwX,go-w+rX .

# **TODO**
#
# Adjust docs location with a patch and for cmake as opposed to sed and qmake.

sed -i "s|share/doc/qtcreator|doc/$PRGNAM-$VERSION|g"  qtcreator.pri || exit 1
sed -i "s|share/doc/qtcreator|doc/$PRGNAM-$VERSION|g"  doc/qtcreatordev/src/qtcreator-documentation.qdoc || exit 1
sed -i "s|share/doc/\${IDE_ID}|doc/$PRGNAM-$VERSION|g" cmake/QtCreatorAPI.cmake || exit 1

# LLVM/Clang can be used to extend Qt Creator functionality.

# **TODO**
#
# - Ensure that the system-wide LLVM is not used if `USE_LLVM=no`.
#   Places of interest:
#
#   - CMakeLists.txt: LLVM_INSTALL_PREFIX, _llvm_arg
#   - scripts/build.py
#
# - Ensure that system-wide LLVM is not picked up instead of _qt-creator-llvm_.
#   This might happen if lib paths are not correctly set in binaries.
# - Find out more about Clang LibTooling in QtC.

if [ "${USE_LLVM:-no}" = yes ]; then
  CMAKE_PREFIX_PATH=/usr/libexec/qtcreator/clang/lib/cmake

  if [ ! -x /usr/libexec/qtcreator/clang/bin/clang ]; then
    printf "error: You must install \"qt-creator-llvm\" package in order to\n"`
          `"error: use LLVM/Clang tools integration (USE_LLVM=yes).\n" 1>& 2

    exit 1
  fi
fi

# Tell DE-s that Qt Creator supports some more MIME types.

patch -p0 < $CWD/add-mime-types.patch

# **TODO**
#
# - Test what happens if Qbs is not installed at build time.
#   Qbs plugin seems to compile, but will it work?

mkdir -p build
cd build
  cmake                                         \
    -GNinja                                     \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS"         \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS"       \
    -DCMAKE_INSTALL_PREFIX=/usr                 \
    -DCMAKE_INSTALL_LIBDIR=lib$LIBDIRSUFFIX     \
    -DCMAKE_BUILD_TYPE=Release                  \
    -DBUILD_QBS:BOOL=OFF                        \
    -DBUILD_PLUGIN_QBSPROJECTMANAGER:BOOL=ON    \
    -DBUILD_CPLUSPLUS_TOOLS:BOOL=ON             \
    -DBUILD_LIBRARY_KSYNTAXHIGHLIGHTING:BOOL=ON \
    -DWITH_DOCS:BOOL=ON                         \
    -DBUILD_QCH:BOOL=ON                         \
    -DBUILD_DEVELOPER_DOCS:BOOL=ON              \
    -DPYTHON_EXECUTABLE=/usr/bin/python3        \
    -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:-}  \
    -Wno-dev                                    \
    ..

  cmake --build .
  cmake --install . --prefix=$PKG/usr
cd ..

# **TODO**
#
# - Find out if _docs_ are installed.
# - Remove `usr/bin/qtcreator.sh`?
# - Find out if _LLVM_ dependent tools are built and installed
#   (ClangFormat, ClangTools).
# - Test `cmake` output for missing features.

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/usr/share/mime/packages
cat $CWD/qt-creator.xml > $PKG/usr/share/mime/packages/qt-creator.xml

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a HACKING LICENSE.GPL3-EXCEPT README.md $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
